import csv
groups = ("б03-101", "б03-102", "б03-103", "б03-104", "б03-105", "б03-106", "б03-107", "б03-108")

def check_file(entry):
    entry = entry.split()
    try:
        year, group = entry[3], entry[4]
        if not (float(year).is_integer() and 1 <= int(year) <= 6):
            raise ValueError("Недопустимый номер курса")
        if group.lower() not in groups:
            raise ValueError("Недопустимая группа")
    except IndexError:
        raise ValueError("Требуемый формат записи: ФИО, номер курса, группа")
    return tuple(entry)

def read_file(f):
    d = []
    success = True
    for i, row in enumerate(csv.reader(f)):
        try:
            d.append(check_file(" ".join(row)))
        except Exception as e:
            print(f"При чтении файла на строке {i + 1} возникла ошибка:")
            print(e.args[0])
            success = False
            break
    return d if success else None

def save_data(f, d):
    f.seek(0)
    f.truncate()
    writer = csv.writer(f)
    writer.writerows(d)
    f.close()
    return open(f.name, "r+", encoding="utf8")

def add_student(d):
    try:
        entry = check_file(input("Введите ФИО, курс, группу: ").strip())
        d.append(entry)
    except Exception as e:
        print(e.args[0])

def remove_student(d):
    name = tuple(input("Введите ФИО студента: ").strip().split())
    try:
        d.pop(d.index(next(e for e in d if e[:3] == name)))
    except StopIteration:
        print("Студент не найден!")

def list_group(d, args):
    try:
        group = args[1]
        for entry in d:
            if entry[-1].lower() == group:
                print(" ".join(entry))
    except IndexError:
        print("Укажите группу")

def find_student(d, args):
    try:
        surname, name = args[2], args[3]
        for entry in d:
            if surname == entry[0].lower() and name == entry[1].lower():
                print(" ".join(entry))
    except IndexError:
        print("Укажите фамилию и имя студента")

def end(f, d):
    print("\nСохранение изменений...")
    f = save_data(f, d)
    f.close()
    print("Выход")
    exit()
    
def main_loop(f, d):
    while True:
        try:
            cmd = input("Введите команду: ").strip().lower()
            if cmd == "сохранить изменения":
                f = save_data(f, d)
            elif cmd == "добавить студента":
                add_student(d)
            elif cmd == "удалить студента":
                remove_student(d)
            elif cmd.startswith("группа"):
                list_group(d, cmd.split())
            elif cmd.startswith("найти студента"):
                find_student(d, cmd.split())
            elif cmd in ("выход", "выйти"):
                end(f, d)
            else:
                print("Неизвестная команда")
        except KeyboardInterrupt:
            end(f, d)

def start_main_loop(f):
    d = read_file(f)
    if d is not None:
        main_loop(f, d)
    exit()

def create_file(path):
    try:
        f = open(path, "x", encoding="utf8")
    except FileExistsError:
        print("Такой файл уже существует")
    except PermissionError:
        print("Недостаточно прав для создания файла")
    except:
        print("Неизвестная ошибка при создании файла")
    else:
        print(f"Файл {path} создан.")
        f = open(f.name, "r+", encoding="utf8")
        start_main_loop(f)

def open_file():
    path = input("Укажите путь к файлу базы данных: ")
    success = False
    f = None
    try:
        f = open(path, "r+", encoding="utf8")
        success = True
    except FileNotFoundError:
        print("Файл не найден")
    except PermissionError:
        print("Доступ к файлу запрещён")
    except:
        print("Неизвестная ошибка при открытии файла")
    else:
        start_main_loop(f)
    finally:
        if not success:
            open_programm(path)

def open_programm(path):
    print("""Выберите:
    1) Ввести другой путь
    2) Создать по указанному пути пустой файл базы данных""")
    try:
        ans = int(input())
        if ans == 1:
            open_file()
        elif ans == 2:
            create_file(path)
        else:
            raise ValueError
    except ValueError:
        print("Введите число от 1 или 2")

open_file()
